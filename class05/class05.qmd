---
title: "Class 5 Data Visualization with ggplot2"
author: "Natalie Ogg A91030809"
format: pdf
---

## Using GGPLOT

Use `install.packages()` function to install ggplot2 function. 

```{r}
head(cars)
```


Must load ggplot before you can use its functions in a session. Do this using `library()` function. 

```{r}
library(ggplot2)
```


Three components of ggplot figures:

1. data (what we want to plot)

2. aesthetic mapping (aes)

3. geometries (geom)

### Adding fit lines:

```{r}
ggplot(cars) + aes(speed,dist) + geom_point() + geom_smooth(method="lm", se=FALSE) + theme_bw() + 
  labs(title="Speed and Stopping Distances of Cars",
       x="Speed (mph)", 
       y="Stopping Distance (ft)",
       subtitle = "Old cars at varying speeds",
       caption="Dataset: 'cars'") 
 
```

There are other options for plotting in R, such as "base R" graphics. 

```{r}
plot(cars)
```

# Anti-Viral Drug
```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```
```{r}
nrow(genes)
colnames(genes)
```

```{r}
sum(genes$State == "up")
```
```{r}
table(genes$State)/nrow(genes)
```

Fraction of up-regulated genes = 0.024

### Changing colors:

```{r}
p <- ggplot(genes) + aes(Condition1, Condition2, col=State) + geom_point()
p <- p + scale_color_manual(values=c("maroon", "gray", "navy"))
p
```
### Adding titles:
```{r}
p + labs(title="Gene Expression Changes Upon Drug Treatment",
        x="Control (no drug)", 
        y="Drug Treatment")
```

# Gapminder (population data)
```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```



```{r}
# install.packages("dplyr")  ## un-comment to install if needed
library(dplyr)

gapminder_2007 <- gapminder %>% filter(year==2007)
```
## Mapping size and categorical color:
```{r}
ggplot(gapminder_2007) + 
  aes(gdpPercap, lifeExp, color=continent, size=pop) + 
  geom_point(alpha=0.5)
```

## Mapping continuous color


```{r}
ggplot(gapminder_2007) + 
  aes(gdpPercap, lifeExp, color=pop) + 
  geom_point(alpha=0.5)
```

## Mapping point size

```{r}
ggplot(gapminder_2007) + 
  aes(gdpPercap, lifeExp, size=pop) + 
  geom_point(alpha=0.5) + 
  scale_size_area(max_size=10)
```

# Repeat for 1957

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957)
ggplot(gapminder_1957) + 
  aes(gdpPercap, lifeExp, color=continent, size=pop) + 
  geom_point(alpha=0.7) + 
  scale_size_area(max_size = 15)
```

## Both 2007 and 1957

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957 | year==2007)
ggplot(gapminder_1957) + 
  aes(gdpPercap, lifeExp, color=continent, size=pop) + 
  geom_point(alpha=0.7) + 
  scale_size_area(max_size = 15) + 
  facet_wrap(~year)
```




## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

This is some of my text.

```{r}
log(100)
```


When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
plot(1:50)
```

You can add options to executable code like this 

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).




